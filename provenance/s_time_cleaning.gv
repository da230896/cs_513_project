
/* Start of top-level graph */
digraph Workflow {
rankdir=TB

/* Title for graph */
fontname=Helvetica; fontsize=18; labelloc=t
label=cleaning_time

/* Start of double cluster for drawing box around nodes in workflow */
subgraph cluster_workflow_box_outer { label=""; color=black; penwidth=2
subgraph cluster_workflow_box_inner { label=""; penwidth=0

/* Style for nodes representing atomic programs in workflow */
node[shape=box style=filled fillcolor="#CCFFCC" peripheries=1 fontname=Helvetica]

/* Nodes representing atomic programs in workflow */
load_farmers
assert_unique_records [shape=record rankdir=LR label="{<f0> assert_unique_records |<f1> asserting the unique records}"];
drop_na [shape=record rankdir=LR label="{<f0> drop_na |<f1> removing all the records where FMID, S_DATE, ZIP is NA}"];
converting_date_and_zip_to_string [shape=record rankdir=LR label="{<f0> converting_date_and_zip_to_string |<f1> converting the S_TIME,ZIP to string}"];
validate_zip_code [shape=record rankdir=LR label="{<f0> validate_zip_code |<f1> filtering time df on ZIP should be numeric and present in zip_code_db}"];
should_contain [shape=record rankdir=LR label="{<f0> should_contain |<f1> time field in df should contain '\:'}"];
is_aplhanumeric [shape=record rankdir=LR label="{<f0> is_aplhanumeric |<f1> time field in df should contain '\:'}"];
split_STIME [shape=record rankdir=LR label="{<f0> split_STIME |<f1> time splitting STIME field on ' ; '}"];
parse_time [shape=record rankdir=LR label="{<f0> parse_time |<f1> parsing time}"];
adding_start_end [shape=record rankdir=LR label="{<f0> adding_start_end |<f1> adding _start and _end}"];
flatten_time_simple [shape=record rankdir=LR label="{<f0> flatten_time_simple |<f1> flattening S_TIME_DICT df}"];
saving_simple_time_df [shape=record rankdir=LR label="{<f0> saving_simple_time_df |<f1> saving simple date df}"];
export_db

/* Style for nodes representing non-parameter data channels in workflow */
node[shape=box style="rounded,filled" fillcolor="#FFFFCC" peripheries=1 fontname=Helvetica]

/* Nodes for non-parameter data channels in workflow */
database_export [shape=record rankdir=LR label="{<f0> database_export |<f1> file\:\{DATASET_LOC\}/../database/farmers_market.db}"];
farmers_market [shape=record rankdir=LR label="{<f0> farmers_market |<f1> file\:\{DATASET_LOC\}/input/farmers_markets.csv}"];
df
asserted_df
time_df
date_zip_to_string
validated_zip
"time[S_TIME]_contains_to"
"time[S_TIME]_is_alphanumeric"
splitted_STIME
parsed_S_TIME_DICT
added_weekday
flatten_time
df_to_save

/* Style for nodes representing parameter channels in workflow */
node[shape=box style="rounded,filled" fillcolor="#FCFCFC" peripheries=1 fontname=Helvetica]

/* Nodes representing parameter channels in workflow */
DATASET_LOC
zip_code_db

/* Edges representing connections between programs and channels */
load_farmers -> df
DATASET_LOC -> load_farmers
farmers_market -> load_farmers
assert_unique_records -> asserted_df
df -> assert_unique_records
drop_na -> time_df
asserted_df -> drop_na
converting_date_and_zip_to_string -> date_zip_to_string
time_df -> converting_date_and_zip_to_string
validate_zip_code -> validated_zip
date_zip_to_string -> validate_zip_code
zip_code_db -> validate_zip_code
should_contain -> "time[S_TIME]_contains_to"
validated_zip -> should_contain
is_aplhanumeric -> "time[S_TIME]_is_alphanumeric"
"time[S_TIME]_contains_to" -> is_aplhanumeric
split_STIME -> splitted_STIME
"time[S_TIME]_is_alphanumeric" -> split_STIME
parse_time -> parsed_S_TIME_DICT
splitted_STIME -> parse_time
adding_start_end -> added_weekday
parsed_S_TIME_DICT -> adding_start_end
flatten_time_simple -> flatten_time
added_weekday -> flatten_time_simple
saving_simple_time_df -> df_to_save
flatten_time -> saving_simple_time_df
export_db -> database_export
DATASET_LOC -> export_db
df_to_save -> export_db

/* End of double cluster for drawing box around nodes in workflow */
}}

/* End of top-level graph */
}
