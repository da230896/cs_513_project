digraph Workflow {
rankdir=TB
fontname=Helvetica; fontsize=18; labelloc=t
label=cleaning_date
subgraph cluster_workflow_box_outer { label=""; color=black; penwidth=2
subgraph cluster_workflow_box_inner { label=""; penwidth=0
node[shape=box style=filled fillcolor="#CCFFCC" peripheries=1 fontname=Helvetica]
load_farmers
drop_na [shape=record rankdir=LR label="{<f0> drop_na |<f1> removing all the records where FMID, S_DATE, ZIP is NA}"];
converting_date_and_zip_to_string [shape=record rankdir=LR label="{<f0> converting_date_and_zip_to_string |<f1> converting the S_DATE,ZIP to string}"];
validate_zip_code [shape=record rankdir=LR label="{<f0> validate_zip_code |<f1> filtering date df on ZIP should be numeric and present in zip_code_db}"];
should_contain_to [shape=record rankdir=LR label="{<f0> should_contain_to |<f1> date field in df should contain ' to '}"];
date_should_contain_numeric [shape=record rankdir=LR label="{<f0> date_should_contain_numeric |<f1> filtering date df on date field should contain numeric data}"];
extract_simple_date [shape=record rankdir=LR label="{<f0> extract_simple_date |<f1> splitting date df on ../../YYYY or ../../YY as date_simple df}"];
extract_complex_date [shape=record rankdir=LR label="{<f0> extract_complex_date |<f1> splitting date df not of ../../YYYY or ../../YY as date_simple df}"];
spliting_date_on_to [shape=record rankdir=LR label="{<f0> spliting_date_on_to |<f1> splitting S_DATE_LIST field on ' to '}"];
parsing_date [shape=record rankdir=LR label="{<f0> parsing_date |<f1> Given a simple string ../../.... to ../../.... parse and give the list}"];
filtering_date [shape=record rankdir=LR label="{<f0> filtering_date |<f1> filtering date_simple df on S_DATE_LIST where length is 2 signifies, it contains from and to date}"];
flatten_date_simple [shape=record rankdir=LR label="{<f0> flatten_date_simple |<f1> flattening date_simple df}"];
saving_simple_date_df [shape=record rankdir=LR label="{<f0> saving_simple_date_df |<f1> saving simple date df}"];
cleaning_date_without_year [shape=record rankdir=LR label="{<f0> cleaning_date_without_year |<f1> cleaning date without year}"];
filtering_FMID_date_without_year [shape=record rankdir=LR label="{<f0> filtering_FMID_date_without_year |<f1> filtering FMID fields which does not have complex date format}"];
parse_complex_date [shape=record rankdir=LR label="{<f0> parse_complex_date |<f1> Given a complex dates like '12 June 2012 to 13 July 2012' parse them and return the list of dates}"];
filtering_complex_date [shape=record rankdir=LR label="{<f0> filtering_complex_date |<f1> filtering}"];
flatten_date_complex [shape=record rankdir=LR label="{<f0> flatten_date_complex |<f1> flattening date_simple df}"];
saving_complex_date_df [shape=record rankdir=LR label="{<f0> saving_complex_date_df |<f1> saving simple date df}"];
node[shape=box style="rounded,filled" fillcolor="#FFFFCC" peripheries=1 fontname=Helvetica]
cleaned_simple_date
cleaned_complex_date
farmers_market [shape=record rankdir=LR label="{<f0> farmers_market |<f1> file\:\{DATASET_LOC\}/input/farmers_markets.csv}"];
df
date
date_zip_to_string
validated_zip
"date[S_DATE]_contains_to"
cleaned_date
date_simple
date_simple_splitted_on_to
parsed_date
filtered_date
cleaned_date_simple
date_complex
date_complex_without_year
date_complex_with_year
parsed_date_complex_with_year
filtered_date_complex_with_year
flattened_parsed_date_complex_with_year1
node[shape=box style="rounded,filled" fillcolor="#FCFCFC" peripheries=1 fontname=Helvetica]
DATASET_LOC
zip_code_db
load_farmers -> df
DATASET_LOC -> load_farmers
farmers_market -> load_farmers
drop_na -> date
df -> drop_na
converting_date_and_zip_to_string -> date_zip_to_string
date -> converting_date_and_zip_to_string
validate_zip_code -> validated_zip
date_zip_to_string -> validate_zip_code
zip_code_db -> validate_zip_code
should_contain_to -> "date[S_DATE]_contains_to"
validated_zip -> should_contain_to
date_should_contain_numeric -> cleaned_date
"date[S_DATE]_contains_to" -> date_should_contain_numeric
extract_simple_date -> date_simple
cleaned_date -> extract_simple_date
extract_complex_date -> date_complex
cleaned_date -> extract_complex_date
spliting_date_on_to -> date_simple_splitted_on_to
date_simple -> spliting_date_on_to
parsing_date -> parsed_date
date_simple_splitted_on_to -> parsing_date
filtering_date -> filtered_date
parsed_date -> filtering_date
date_simple -> filtering_date
flatten_date_simple -> cleaned_date_simple
filtered_date -> flatten_date_simple
saving_simple_date_df -> cleaned_simple_date
cleaned_date_simple -> saving_simple_date_df
cleaning_date_without_year -> date_complex_without_year
date_complex -> cleaning_date_without_year
filtering_FMID_date_without_year -> date_complex_with_year
date_complex -> filtering_FMID_date_without_year
date_complex_without_year -> filtering_FMID_date_without_year
parse_complex_date -> parsed_date_complex_with_year
date_complex_with_year -> parse_complex_date
filtering_complex_date -> filtered_date_complex_with_year
parsed_date_complex_with_year -> filtering_complex_date
flatten_date_complex -> flattened_parsed_date_complex_with_year1
filtered_date_complex_with_year -> flatten_date_complex
saving_complex_date_df -> cleaned_complex_date
flattened_parsed_date_complex_with_year1 -> saving_complex_date_df
}}
subgraph cluster_input_ports_group_outer { label=""; penwidth=0
subgraph cluster_input_ports_group_inner { label=""; penwidth=0
node[shape=circle style="rounded,filled" fillcolor="#FFFFFF" peripheries=1 fontname=Helvetica width=0.2]
DATASET_LOC_input_port [label=""]
zip_code_db_input_port [label=""]
farmers_market_input_port [label=""]
}}
subgraph cluster_output_ports_group_outer { label=""; penwidth=0
subgraph cluster_output_ports_group_inner { label=""; penwidth=0
node[shape=circle style="rounded,filled" fillcolor="#FFFFFF" peripheries=1 fontname=Helvetica width=0.2]
cleaned_simple_date_output_port [label=""]
cleaned_complex_date_output_port [label=""]
}}
DATASET_LOC_input_port -> DATASET_LOC
zip_code_db_input_port -> zip_code_db
farmers_market_input_port -> farmers_market
cleaned_simple_date -> cleaned_simple_date_output_port
cleaned_complex_date -> cleaned_complex_date_output_port
}
